{
	"info": {
		"_postman_id": "84cc8fba-647f-4b61-a444-70742e5f97a5",
		"name": "HW2. Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19370261"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/first",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test of name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Ketty');\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test of salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(150000);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test of age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('25');\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req=request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test of name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test of age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test of salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Test of salary*4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(Number(req.salary)*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{url}}/user_info_3",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //Cтатус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req_data=pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test of name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test of age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test of salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_has_name_Luky\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog.name)).to.eql('\"Luky\"')\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog_has_age_4\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog.age)).to.eql('4')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req_data=pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test of name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"}); \r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Test of age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(Number(req_data.age));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req_data.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test of salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(Number(req_data.salary));\r",
							"});\r",
							"\r",
							"//. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test of salary_2\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(Number(req_data.salary)*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Test of salary_3\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(Number(req_data.salary)*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", req_data.name);\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", req_data.age);\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", req_data.salary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++) { \r",
							"  console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"// Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"// Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req=request.data\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response_has_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response_has_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.to.have.property(\"qa_salary_after_6_months\"));\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response_has_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.to.have.property(\"qa_salary_after_12_months\"));\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response_has_qa_salary_after_1.5_years\", function () {\r",
							"    pm.expect(jsonData.to.have.property(\"qa_salary_after_1.5_year\"));\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response_has_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.to.have.property(\"qa_salary_after_3.5_years\"));\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"response_has_person\", function () {\r",
							"    pm.expect(jsonData.to.have.property(\"person\"));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_value\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_6_months_value\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql((+req.salary)*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_12_months_value\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql((+req.salary)*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_1.5 years_value\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql((+req.salary)*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_3.5 years_value\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql((+req.salary)*3.8);\r",
							"}); \r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name_first\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_after_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql((+req.salary)*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i=0; i< jsonData.person.u_name.length;i++) { \r",
							"  console.log(jsonData.person.u_name[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{url}}/user_info_2",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}